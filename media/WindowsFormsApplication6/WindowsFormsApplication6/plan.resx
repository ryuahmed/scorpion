<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="pictureBox1.Locked" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>